package net.ctrdn.stuba.pks.netanalyser.am.ipv4sourcestats;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import net.ctrdn.stuba.pks.netanalyser.common.DataTypeHelpers;
import net.ctrdn.stuba.pks.netanalyser.common.NonEditableColorableDefaultTableModel;
import net.ctrdn.stuba.pks.netanalyser.exception.AnalyserModuleException;
import net.ctrdn.stuba.pks.netanalyser.exception.DataTypeException;
import net.ctrdn.stuba.pks.netanalyser.parser.IPv4Address;
import net.ctrdn.stuba.pks.netanalyser.parser.IPv4Frame;

public class IPv4SourceStatsPanel extends javax.swing.JPanel {

    private final IPv4SourceStatsAnalyserModule module;

    public IPv4SourceStatsPanel(IPv4SourceStatsAnalyserModule module) {
        this.module = module;
        initComponents();
    }

    protected void update(List<IPv4Frame> frameList, int filteredFrameCount, int totalFrameCount) throws AnalyserModuleException {
        List<IPv4Address> addressList = new ArrayList<>();
        Map<IPv4Address, Integer> addressTxBytesList = new HashMap<>();
        Map<IPv4Address, Integer> addressTxPacketsList = new HashMap<>();
        IPv4Address topTxerAddress = null;
        int topTxerBytes = 0;
        for (IPv4Frame frame : frameList) {
            if (!addressList.contains(frame.getIpSourceAddress())) {
                addressList.add(frame.getIpSourceAddress());
                addressTxBytesList.put(frame.getIpSourceAddress(), frame.getIpTotalLength());
                addressTxPacketsList.put(frame.getIpSourceAddress(), 1);
            } else {
                int bytes = addressTxBytesList.get(frame.getIpSourceAddress());
                addressTxBytesList.replace(frame.getIpSourceAddress(), bytes + frame.getIpTotalLength());
                addressTxPacketsList.replace(frame.getIpSourceAddress(), addressTxPacketsList.get(frame.getIpSourceAddress()) + 1);
            }
        }
        Collections.sort(addressList, new Comparator<IPv4Address>() {
            @Override
            public int compare(IPv4Address o1, IPv4Address o2) {
                try {
                    return o1.getString().compareTo(o2.getString());
                } catch (DataTypeException ex) {
                    return 0;
                }
            }
        });
        for (Map.Entry<IPv4Address, Integer> mapEntry : addressTxBytesList.entrySet()) {
            if (mapEntry.getValue() > topTxerBytes) {
                topTxerAddress = mapEntry.getKey();
                topTxerBytes = mapEntry.getValue();
            }
        }
        try {
            DefaultTableModel tableModel = new NonEditableColorableDefaultTableModel(new Object[]{"IPv4 Address", "Transmitted Data"}, 0);
            for (IPv4Address srcAddr : addressList) {
                tableModel.addRow(new Object[]{srcAddr.getString(), DataTypeHelpers.getReadableByteSize(addressTxBytesList.get(srcAddr))});
            }

            this.jTableTxers.setModel(tableModel);
            if (topTxerAddress == null) {
                this.jLabelTopTxerIp.setText("n/a");
            } else {
                this.jLabelTopTxerIp.setText(topTxerAddress.getString());
            }

            this.jLabelTopTxerBytes.setText(DataTypeHelpers.getReadableByteSize(topTxerBytes));
            this.jLabelTopTxerPackets.setText(Integer.toString(addressTxPacketsList.get(topTxerAddress)));
        } catch (DataTypeException ex) {
            AnalyserModuleException finalEx = new AnalyserModuleException("Failed to update analyser");
            finalEx.addSuppressed(ex);
            throw finalEx;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelTopTxerIp = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelTopTxerBytes = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelTopTxerPackets = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTxers = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setName("IPv4 Source Stats"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Top transmitter:");

        jLabelTopTxerIp.setText("-");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("Transmitted bytes:");

        jLabelTopTxerBytes.setText("-");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Transmitted packets:");

        jLabelTopTxerPackets.setText("-");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTopTxerIp))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTopTxerBytes))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTopTxerPackets)))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelTopTxerIp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelTopTxerBytes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabelTopTxerPackets))
                .addContainerGap(407, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(300, 27));

        jTableTxers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableTxers);

        jLabel3.setText("IPv4 Addresses by source address");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelTopTxerBytes;
    private javax.swing.JLabel jLabelTopTxerIp;
    private javax.swing.JLabel jLabelTopTxerPackets;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTableTxers;
    // End of variables declaration//GEN-END:variables
}
