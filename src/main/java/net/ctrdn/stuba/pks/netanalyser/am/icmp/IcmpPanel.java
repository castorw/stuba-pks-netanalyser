/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.ctrdn.stuba.pks.netanalyser.am.icmp;

import java.util.List;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import net.ctrdn.stuba.pks.netanalyser.common.DataTypeHelpers;
import net.ctrdn.stuba.pks.netanalyser.common.NonEditableColorableDefaultTableModel;
import net.ctrdn.stuba.pks.netanalyser.exception.AnalyserModuleException;
import net.ctrdn.stuba.pks.netanalyser.exception.DataTypeException;
import net.ctrdn.stuba.pks.netanalyser.parser.IcmpFrame;
import org.krakenapps.pcap.util.Buffer;

/**
 *
 * @author castor
 */
public class IcmpPanel extends javax.swing.JPanel {

    private List<IcmpFrame> frameList;

    public IcmpPanel() {
        initComponents();
        this.jTableFrameTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                int tableRowId = IcmpPanel.this.jTableFrameTable.getSelectedRow();
                if (tableRowId >= 0) {
                    int frameId = (Integer) IcmpPanel.this.jTableFrameTable.getModel().getValueAt(tableRowId, 0);
                    if (IcmpPanel.this.frameList != null) {
                        Buffer frameBuffer = IcmpPanel.this.frameList.get(frameId).getDataBuffer();
                        int posBackup = frameBuffer.position();
                        frameBuffer.rewind();
                        IcmpPanel.this.jTextPaneFrameData.setText(DataTypeHelpers.getFrameDataFormatted(frameBuffer, 32));
                        IcmpPanel.this.jTextPaneFrameData.setCaretPosition(0);
                        frameBuffer.rewind();
                        frameBuffer.skip(posBackup);
                    }
                }
            }
        });
    }

    protected void update(List<IcmpFrame> frameList, int filteredFrameCount, int totalFrameCount) throws AnalyserModuleException {
        try {
            this.frameList = frameList;
            DefaultTableModel tableModel = new NonEditableColorableDefaultTableModel(new Object[]{"#", "Capture #", "Original Length", "Wire Length", "Source MAC", "Destination MAC", "Source IPv4", "Destination IPv4", "IPv4 Length", "ICMP Type", "ICMP Code"}, 0);
            int index = 0;
            for (IcmpFrame frame : frameList) {
                tableModel.addRow(new Object[]{index, frame.getCaptureId(), frame.getCaptureOriginalLength(), frame.getCaptureWireLength(), frame.getEthernetSourceMacAddressString(), frame.getEthernetDestinationMacAddressString(), frame.getIpSourceAddress().getString(), frame.getIpDestinationAddress().getString(), frame.getIpTotalLength(), "(" + frame.getIcmpTypeNumber() + ") " + frame.getIcmpTypeString(), "(" + frame.getIcmpCodeNumber() + ") " + frame.getIcmpCodeString()});
                index++;
            }
            this.jTableFrameTable.setModel(tableModel);
        } catch (DataTypeException ex) {
            AnalyserModuleException finalEx = new AnalyserModuleException("Failed to update analyser");
            finalEx.addSuppressed(ex);
            throw finalEx;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFrameTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneFrameData = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableFrameTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPaneFrameData1 = new javax.swing.JTextPane();

        setName("ICMP"); // NOI18N

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setLastDividerLocation(100);

        jTableFrameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableFrameTable);

        jSplitPane1.setTopComponent(jScrollPane1);

        jTextPaneFrameData.setEditable(false);
        jTextPaneFrameData.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jScrollPane2.setViewportView(jTextPaneFrameData);

        jSplitPane1.setRightComponent(jScrollPane2);

        jPanel1.setName("Frame Info"); // NOI18N

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setLastDividerLocation(100);

        jTableFrameTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Capture Date", "Original Length", "Wire Length", "Type", "Source MAC", "Destination MAC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableFrameTable1);

        jSplitPane2.setTopComponent(jScrollPane3);

        jTextPaneFrameData1.setEditable(false);
        jTextPaneFrameData1.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jScrollPane4.setViewportView(jTextPaneFrameData1);

        jSplitPane2.setRightComponent(jScrollPane4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jSplitPane1.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable jTableFrameTable;
    private javax.swing.JTable jTableFrameTable1;
    private javax.swing.JTextPane jTextPaneFrameData;
    private javax.swing.JTextPane jTextPaneFrameData1;
    // End of variables declaration//GEN-END:variables

    public JTable getTable() {
        return this.jTableFrameTable;
    }
}
