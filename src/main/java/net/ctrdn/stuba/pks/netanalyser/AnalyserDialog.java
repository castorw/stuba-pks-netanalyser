package net.ctrdn.stuba.pks.netanalyser;

import net.ctrdn.stuba.pks.netanalyser.annotation.Analyser;
import net.ctrdn.stuba.pks.netanalyser.am.AnalyserModule;
import com.google.common.base.Preconditions;
import java.awt.Window;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.ctrdn.stuba.pks.netanalyser.common.DataTypeHelpers;
import net.ctrdn.stuba.pks.netanalyser.exception.NetAnalyserException;
import net.ctrdn.stuba.pks.netanalyser.parser.EthernetFrame;
import org.reflections.Reflections;

public class AnalyserDialog extends javax.swing.JFrame {

    private final AboutDialog aboutDialog;
    protected CaptureFileParser parser = null;
    private final List<AnalyserModule> modules = new ArrayList<>();

    @SuppressWarnings({"unchecked", "rawtypes"})
    public static void enableOSXFullscreen(Window window) {
        Preconditions.checkNotNull(window);
        try {
            Class util = Class.forName("com.apple.eawt.FullScreenUtilities");
            Class params[] = new Class[]{Window.class, Boolean.TYPE};
            Method method = util.getMethod("setWindowCanFullScreen", params);
            method.invoke(util, window, true);
        } catch (ClassNotFoundException e1) {
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public AnalyserDialog() {
        this.setIconImage(Launcher.getIconImage());
        this.setTitle("PKS PCAP Analyser");
        this.setName("PKS PCAP Analyser");
        DataTypeHelpers.initialize();
        AnalyserDialog.enableOSXFullscreen(this);
        this.aboutDialog = new AboutDialog(this, true);
        initComponents();

        CaptureFileParser.initialize();

        Reflections reflections = new Reflections("net.ctrdn.stuba.pks.netanalyser.am");
        Set<Class<?>> foundAnalyserClasses = reflections.getTypesAnnotatedWith(Analyser.class);
        for (Class<?> analyserClass : foundAnalyserClasses) {
            try {
                if (AnalyserModule.class.isAssignableFrom(analyserClass)) {
                    Constructor analyserConstructor = analyserClass.getDeclaredConstructor();
                    AnalyserModule analyserSpawnedObject = (AnalyserModule) analyserConstructor.newInstance();
                    this.modules.add(analyserSpawnedObject);
                } else {
                    System.out.println("Class " + analyserClass.getName() + " is not assignable from AnalyserModule");
                }
            } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException ex) {
                ex.printStackTrace();
            }
        }
        Collections.sort(modules, new Comparator<AnalyserModule>() {

            @Override
            public int compare(AnalyserModule o1, AnalyserModule o2) {
                return o1.getPanelOrderKey() < o2.getPanelOrderKey() ? -1 : o1.getPanelOrderKey() == o2.getPanelOrderKey() ? 0 : 1;
            }
        });
        for (AnalyserModule module : this.modules) {
            Analyser analyserAnnotation = module.getClass().getDeclaredAnnotation(Analyser.class);
            System.out.println("Registered analyser module: " + analyserAnnotation.name() + " version " + analyserAnnotation.version());
            this.jTabbedPaneAnalysers.add(module.getPanel());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelFileName = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTabbedPaneAnalysers = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PKS Analyser");
        setName("PKS Analyser"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Loaded File:");

        jLabelFileName.setText("-");

        jButton1.setText("Load PCAP File...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("About...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelFileName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jLabelFileName)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneAnalysers, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneAnalysers, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (this.parser != null) {
            int confirmationResult = JOptionPane.showConfirmDialog(this, "There is currently an analysis open, opening new file will remove these results. Are you sure you want to continue?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (confirmationResult == JOptionPane.NO_OPTION) {
                return;
            }
        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int chooserReturnValue = fileChooser.showOpenDialog(this);
        try {
            if (chooserReturnValue == JFileChooser.APPROVE_OPTION) {
                this.parser = new CaptureFileParser();
                parser.loadFile(fileChooser.getSelectedFile());
                for (AnalyserModule module : this.getModules()) {
                    Class<? extends EthernetFrame> filterClass = module.getFilterClass();
                    List<EthernetFrame> filteredList = new ArrayList<>();
                    for (EthernetFrame frame : parser.getFrameList()) {
                        if (filterClass.isAssignableFrom(frame.getClass())) {
                            filteredList.add(frame);
                        }
                    }
                    module.parse(filteredList, filteredList.size(), parser.getFrameList().size());
                }
                this.jLabelFileName.setText(fileChooser.getSelectedFile().getAbsolutePath() + "(" + DataTypeHelpers.getReadableByteSize(fileChooser.getSelectedFile().length()) + " )");
            }
        } catch (NetAnalyserException ex) {
            JOptionPane.showMessageDialog(this, "(" + ex.getClass().getSimpleName() + ") " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.aboutDialog.setLocationRelativeTo(this);
        this.aboutDialog.showDialog();

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelFileName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPaneAnalysers;
    // End of variables declaration//GEN-END:variables

    public List<AnalyserModule> getModules() {
        return modules;
    }
}
